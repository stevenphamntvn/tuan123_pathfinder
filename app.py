# file: app.py
# ƒê√£ chu·∫©n h√≥a t√™n DB_PATH v√† COLLECTION_NAME

# --- PH·∫¶N S·ª¨A L·ªñI QUAN TR·ªåNG CHO STREAMLIT CLOUD ---
# Ba d√≤ng n√†y ph·∫£i n·∫±m ·ªü ngay ƒë·∫ßu file
__import__('pysqlite3')
import sys
sys.modules['sqlite3'] = sys.modules.pop('pysqlite3')
# ----------------------------------------------------

import streamlit as st
import chromadb
import google.generativeai as genai
import os
import requests
import zipfile
from io import BytesIO
import time

# --- PH·∫¶N C·∫§U H√åNH ---
st.set_page_config(
    page_title="Pathfinder - Tr·ª£ l√Ω Tu·∫•n 123",
    page_icon="ü§ñ",
    layout="wide"
)

# S·ª≠ d·ª•ng st.secrets ƒë·ªÉ b·∫£o m·∫≠t API key khi tri·ªÉn khai online
try:
    GOOGLE_API_KEY = st.secrets["GOOGLE_API_KEY"]
except (FileNotFoundError, KeyError):
    GOOGLE_API_KEY = 'AIzaSyBOAgpJI1voNNxeOC6sS7y01EJRXWSK0YU' # !!! D√ÅN API KEY C·ª¶A B·∫†N V√ÄO ƒê√ÇY

# --- C·∫§U H√åNH TRI·ªÇN KHAI ONLINE ---
# !!! THAY ƒê·ªîI QUAN TR·ªåNG: T√°ch ID c·ªßa file ra ri√™ng
GOOGLE_DRIVE_FILE_ID = "YOUR_DRIVE_FILE_ID" #!!! THAY ID FILE ZIP M·ªöI C·ª¶A B·∫†N

# --- ƒê√É CHU·∫®N H√ìA ---
DB_PATH = "chroma_db"
COLLECTION_NAME = "collection"
# --------------------

# --- B·∫¢NG GI√Å V√Ä L·ª∞A CH·ªåN M√î H√åNH ---
USD_TO_VND_RATE = 25500
MODEL_PRICING = {
    "gemini-1.5-pro-latest": {"input": 3.50, "output": 10.50},
    "gemini-1.5-flash-latest": {"input": 0.35, "output": 1.05}
}

# --- KH·ªûI T·∫†O AI V√Ä DATABASE ---

@st.cache_resource
def setup_database():
    """T·∫£i v√† gi·∫£i n√©n CSDL t·ª´ URL n·∫øu ch∆∞a c√≥. ƒê√£ s·ª≠a l·ªói 403."""
    if not os.path.exists(DB_PATH):
        st.info(f"Kh√¥ng t√¨m th·∫•y CSDL t·∫°i '{DB_PATH}'. B·∫Øt ƒë·∫ßu t·∫£i t·ª´ Google Drive...")
        
        try:
            url = f'https://drive.google.com/uc?export=download&id={GOOGLE_DRIVE_FILE_ID}'
            session = requests.Session()
            response = session.get(url, stream=True)
            
            token = None
            for key, value in response.cookies.items():
                if key.startswith('download_warning'):
                    token = value
                    break
            
            if token:
                params = {'id': GOOGLE_DRIVE_FILE_ID, 'confirm': token}
                response = session.get(url, params=params, stream=True)

            if response.status_code == 200:
                with st.spinner("ƒêang t·∫£i file CSDL..."):
                    zip_file = BytesIO(response.content)
                with st.spinner("ƒêang gi·∫£i n√©n CSDL..."):
                    with zipfile.ZipFile(zip_file, 'r') as z:
                        z.extractall('.')
                st.success("T·∫£i v√† gi·∫£i n√©n CSDL th√†nh c√¥ng!")
                time.sleep(2)
            else:
                st.error(f"L·ªói t·∫£i file: Status code {response.status_code}. H√£y ki·ªÉm tra l·∫°i ID file v√† ƒë·∫£m b·∫£o file ƒë∆∞·ª£c chia s·∫ª c√¥ng khai.")
                return None, None

        except Exception as e:
            st.error(f"L·ªói trong qu√° tr√¨nh t·∫£i ho·∫∑c gi·∫£i n√©n: {e}")
            return None, None
    
    try:
        with st.spinner("ƒêang k·∫øt n·ªëi t·ªõi c∆° s·ªü d·ªØ li·ªáu vector..."):
            client = chromadb.PersistentClient(path=DB_PATH)
            collection = client.get_collection(name=COLLECTION_NAME)
        st.success("K·∫øt n·ªëi CSDL th√†nh c√¥ng!")
        return client, collection
    except Exception as e:
        st.error(f"L·ªói k·∫øt n·ªëi t·ªõi ChromaDB t·∫°i '{DB_PATH}': {e}")
        return None, None

def configure_ai():
    """C·∫•u h√¨nh API key cho Google AI."""
    try:
        genai.configure(api_key=GOOGLE_API_KEY)
    except Exception as e:
        st.error(f"L·ªói c·∫•u h√¨nh Google Generative AI: {e}")

# --- C√ÅC H√ÄM X·ª¨ L√ù L√ïI ---

def get_relevant_context(query, collection, n_results=5):
    if collection is None: return []
    results = collection.query(query_texts=[query], n_results=n_results)
    return results['documents'][0] if results['documents'] else []

def get_ai_response(query, model_name, collection, system_instruction):
    relevant_docs = get_relevant_context(query, collection)
    context_str = "\n---\n".join(relevant_docs)
    prompt = f"""{system_instruction}\n\nD·ª±a v√†o c√°c th√¥ng tin, quy ƒë·ªãnh, v√† ki·∫øn th·ª©c ƒë∆∞·ª£c cung c·∫•p d∆∞·ªõi ƒë√¢y ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng.\n\n---\n{context_str}\n---\n\nC√¢u h·ªèi: {query}"""
    
    try:
        model = genai.GenerativeModel(model_name)
        response = model.generate_content(prompt)
        usage_info = None
        if response.usage_metadata:
            usage = response.usage_metadata
            pricing = MODEL_PRICING[model_name]
            total_cost_usd = ((usage.prompt_token_count / 1_000_000) * pricing["input"]) + ((usage.candidates_token_count / 1_000_000) * pricing["output"])
            usage_info = {
                "total_tokens": usage.total_token_count,
                "cost_vnd": total_cost_usd * USD_TO_VND_RATE,
                "model": model_name
            }
        return response.text, usage_info
    except Exception as e:
        return f"L·ªói khi g·ªçi API Google: {e}", None

# --- GIAO DI·ªÜN NG∆Ø·ªúI D√ôNG (UI) ---

configure_ai()
client, collection = setup_database()

st.title(" Pathfinder - Tr·ª£ l√Ω AI Tu·∫•n 123 ü§ñ")
st.caption("Tr·ª£ l√Ω ƒë∆∞·ª£c x√¢y d·ª±ng d·ª±a tr√™n kho
